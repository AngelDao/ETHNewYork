/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StoreFront,
  StoreFrontInterface,
} from "../../contracts/StoreFront";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_minter",
        type: "address",
      },
      {
        internalType: "string",
        name: "_baseURI",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "TransferBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TransferSingle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "value",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "URI",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "owners",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "base",
        type: "string",
      },
    ],
    name: "updateBaseUri",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "uri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234620000ed5762001e18803803806200001d8162000119565b9283398101604082820312620000ed5781516001600160a01b0381168103620000ed5760208381015190936001600160401b039190828211620000ed570183601f82011215620000ed578051918211620000f2575b62000086601f8301601f1916860162000119565b93828552858383010111620000ed57936000945b828610620000d7575081620000b89511620000c8575b5050620001e4565b604051611adc90816200033c8239f35b600091840101523880620000b0565b858101820151858701830152948101946200009a565b600080fd5b620000fc62000102565b62000072565b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176200013f57604052565b6200014962000102565b604052565b90600182811c9216801562000180575b60208310146200016a57565b634e487b7160e01b600052602260045260246000fd5b91607f16916200015e565b601f811162000198575050565b6000906004825260208220906020601f850160051c83019410620001d9575b601f0160051c01915b828110620001cd57505050565b818155600101620001c0565b9092508290620001b7565b91909160025460018060a01b031991338383161760025560018060a01b0391823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a360058054909316911617905581516001600160401b0381116200032b575b62000264816200025e6004546200014e565b6200018b565b602080601f8311600114620002a3575081929360009262000297575b50508160011b916000199060031b1c191617600455565b01519050388062000280565b6004600052601f198316949091907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b926000905b87821062000312575050836001959610620002f8575b505050811b01600455565b015160001960f88460031b161c19169055388080620002ed565b80600185968294968601518155019501930190620002d7565b6200033562000102565b6200024c56fe60806040526004361015610013575b600080fd5b60003560e01c8062fdd58e1461012a57806301ffc9a7146101215780630e89341c146101185780632eb2c2d61461010f57806339f7e37f1461010657806340c10f19146100fd5780634e1273f4146100f4578063715018a6146100eb5780638da5cb5b146100e2578063a22cb465146100d9578063bd85b039146100d0578063e985e9c5146100c7578063f242432a146100be5763f2fde38b146100b657600080fd5b61000e6111e1565b5061000e610ff5565b5061000e610f78565b5061000e610f4b565b5061000e610e7b565b5061000e610e46565b5061000e610dba565b5061000e610cff565b5061000e610b15565b5061000e61096f565b5061000e610694565b5061000e610379565b5061000e61021a565b5061000e61019a565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b503461000e57604060031936011261000e5773ffffffffffffffffffffffffffffffffffffffff6101c9610133565b16600052600060205260406000206024356000526020526020604060002054604051908152f35b7fffffffff0000000000000000000000000000000000000000000000000000000081160361000e57565b503461000e57602060031936011261000e5760207fffffffff0000000000000000000000000000000000000000000000000000000060043561025b816101f0565b167f01ffc9a70000000000000000000000000000000000000000000000000000000081149081156102c3575b8115610299575b506040519015158152f35b7f0e89341c000000000000000000000000000000000000000000000000000000009150143861028e565b7fd9b67a260000000000000000000000000000000000000000000000000000000081149150610287565b918091926000905b82821061030d575011610306575050565b6000910152565b915080602091830151818601520182916102f5565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361035e815180928187528780880191016102ed565b0116010190565b906020610376928181520190610322565b90565b503461000e5760208060031936011261000e57600454610398816117d1565b600090156104095750506103c76103f9610405926103cd6103ba60043561196e565b6040519485938401611895565b9061193c565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261053e565b60405191829182610365565b0390f35b909160405191809361041a816117d1565b808552916001918083169081156104a5575060011461044c575b505050506104478161040593038261053e565b6103f9565b929450600483527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828410610492575050508161040593610447928201019338610434565b8054858501870152928501928101610475565b9250505061040594507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009150169082015261044781604081019338610434565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6020810190811067ffffffffffffffff82111761053157604052565b6105396104e5565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761053157604052565b60209067ffffffffffffffff8111610599575b60051b0190565b6105a16104e5565b610592565b81601f8201121561000e578035916105bd8361057f565b926105cb604051948561053e565b808452602092838086019260051b82010192831161000e578301905b8282106105f5575050505090565b813581529083019083016105e7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff8111610640575b01160190565b6106486104e5565b61063a565b81601f8201121561000e5780359061066482610604565b92610672604051948561053e565b8284526020838301011161000e57816000926020809301838601378301015290565b503461000e5760a060031936011261000e576106ae610133565b6106b6610156565b9067ffffffffffffffff9060443582811161000e576106d99036906004016105a6565b60643583811161000e576106f19036906004016105a6565b9260843590811161000e5761070a90369060040161064d565b8151936107198151861461159f565b73ffffffffffffffffffffffffffffffffffffffff808516958633148015610907575b61074590611387565b60005b818110610860575050956107a496811680966040517f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb33918061078c888b83611656565b0390a4600093903b6107a6575050505050151561153a565b005b917fffffffff0000000000000000000000000000000000000000000000000000000094956020928561080b95604051968795869485937fbc197c81000000000000000000000000000000000000000000000000000000009d8e8652336004870161167b565b03925af1918215610853575b91610825575b50161461153a565b610846915060203d811161084c575b61083e818361053e565b810190611496565b3861081d565b503d610834565b61085b61152d565b610817565b80876108ff6108f7836108b58e6108c48b6108b58f61088460019c61088d92611634565b51968793611634565b519873ffffffffffffffffffffffffffffffffffffffff166000526000602052604060002090565b90600052602052604060002090565b6108cf878254611456565b905573ffffffffffffffffffffffffffffffffffffffff166000526000602052604060002090565b91825461148a565b905501610748565b506107456109686109613361093c8a73ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b9073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b5460ff1690565b905061073c565b503461000e5760208060031936011261000e5767ffffffffffffffff60043581811161000e573660238201121561000e57806004013591821161000e576024903682848301011161000e576109dd73ffffffffffffffffffffffffffffffffffffffff6002541633146112b3565b6109f1836109ec6004546117d1565b611824565b600093601f8411600114610a4d5750928293600093610a40575b5050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c191617600455005b0101359050388080610a0b565b917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0841694610a9e60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90565b9381905b878210610afb5750508460019610610ac1575b50505050811b01600455005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88660031b161c199201013516905538808080610ab5565b806001849786839596890101358155019601920190610aa2565b503461000e57604060031936011261000e57610b2f610133565b60243573ffffffffffffffffffffffffffffffffffffffff918260055416330361000e57610c009060065460405194610b6786610515565b6000958691828252610b9d846108b58773ffffffffffffffffffffffffffffffffffffffff166000526000602052604060002090565b610ba888825461148a565b905584169384836040517fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62339180610bee8d8b8360209093929193604081019481520152565b0390a43b610c3157505050151561153a565b610c2a6108f7600654610c1a610c15826117a3565b600655565b6000526003602052604060002090565b9055604051f35b610c937fffffffff0000000000000000000000000000000000000000000000000000000093946020926040519485809481938c7ff23a6e61000000000000000000000000000000000000000000000000000000009b8c855233600486016114ab565b03925af1908115610cad575b86916108255750161461153a565b610cb561152d565b610c9f565b90815180825260208080930193019160005b828110610cda575050505090565b835185529381019392810192600101610ccc565b906020610376928181520190610cba565b503461000e57604060031936011261000e5760043567ffffffffffffffff80821161000e573660238301121561000e578160040135610d3d8161057f565b92610d4b604051948561053e565b81845260209160248386019160051b8301019136831161000e57602401905b828210610da3578560243586811161000e5761040591610d91610d979236906004016105a6565b906116d7565b60405191829182610cee565b838091610daf84610179565b815201910190610d6a565b503461000e57600080600319360112610e43576002547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff821691610e143384146112b3565b1660025581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600060031936011261000e57602073ffffffffffffffffffffffffffffffffffffffff60025416604051908152f35b503461000e57604060031936011261000e57610e95610133565b6024359081151580920361000e5773ffffffffffffffffffffffffffffffffffffffff90336000526001602052610ef08160406000209073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541660ff851617905560405192835216907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b503461000e57602060031936011261000e5760043560005260036020526020604060002054604051908152f35b503461000e57604060031936011261000e57602060ff610fe9610f99610133565b73ffffffffffffffffffffffffffffffffffffffff610fb6610156565b91166000526001845260406000209073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b54166040519015158152f35b503461000e5760a060031936011261000e5761100f610133565b611017610156565b6084359160443560643567ffffffffffffffff851161000e576110416107a495369060040161064d565b9073ffffffffffffffffffffffffffffffffffffffff948585169586331480156111a5575b61106f90611387565b61109d856108b58873ffffffffffffffffffffffffffffffffffffffff166000526000602052604060002090565b6110a8848254611456565b90556110d8856108b58473ffffffffffffffffffffffffffffffffffffffff166000526000602052604060002090565b6110e384825461148a565b9055811680966040517fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62339180611128888b8360209093929193604081019481520152565b0390a4600093903b611140575050505050151561153a565b917fffffffff0000000000000000000000000000000000000000000000000000000094956020928561080b95604051968795869485937ff23a6e61000000000000000000000000000000000000000000000000000000009d8e865233600487016114eb565b5061106f6111da6109613361093c8a73ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b9050611066565b503461000e57602060031936011261000e576111fb610133565b73ffffffffffffffffffffffffffffffffffffffff61121f816002541633146112b3565b81161561122f576107a490611318565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b156112ba57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6002549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600255167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b1561138e57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906001811061144a570190565b6114526113ec565b0190565b818110611461570390565b6114696113ec565b0390565b801960301161147d575b60300190565b6114856113ec565b611477565b8119811161144a570190565b9081602091031261000e5751610376816101f0565b909260a09273ffffffffffffffffffffffffffffffffffffffff610376969516835260006020840152604083015260608201528160808201520190610322565b919261037695949160a09473ffffffffffffffffffffffffffffffffffffffff8092168552166020840152604083015260608201528160808201520190610322565b506040513d6000823e3d90fd5b1561154157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f554e534146455f524543495049454e54000000000000000000000000000000006044820152fd5b156115a657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4c454e4754485f4d49534d4154434800000000000000000000000000000000006044820152fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020918151811015611649575b60051b010190565b611651611604565b611641565b909161166d61037693604084526040840190610cba565b916020818403910152610cba565b939061037695936116bb916116c99473ffffffffffffffffffffffffffffffffffffffff809216885216602087015260a0604087015260a0860190610cba565b908482036060860152610cba565b916080818403910152610322565b9182516116e68351821461159f565b83516116f18161057f565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061172d6040926117258451958661053e565b80855261057f565b01946020953687850137829560005b85811061174e57505050505050909150565b8073ffffffffffffffffffffffffffffffffffffffff6117706001938c611634565b511660005260008352846000206117878286611634565b516000528352846000205461179c8288611634565b520161173c565b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461144a570190565b90600182811c9216801561181a575b60208310146117eb57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916117e0565b601f8111611830575050565b600090600482527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b906020601f850160051c8301941061188b575b601f0160051c01915b82811061188057505050565b818155600101611874565b909250829061186b565b600454600092916118a5826117d1565b9160019081811690811561191157506001146118c057505050565b909192935060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b906000915b8483106118fe575050500190565b81816020925485870152019201916118f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001683525050019150565b90611452602092828151948592016102ed565b90602091805182101561196157010190565b611969611604565b010190565b8015611a4d57806000908282935b611a39575061198a83610604565b92611998604051948561053e565b808452817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06119c683610604565b013660208701375b6119d85750505090565b6119e19061141c565b90600a90611a246119fc6119f684840661146d565b60ff1690565b60f81b7fff000000000000000000000000000000000000000000000000000000000000001690565b841a611a30848761194f565b530490816119ce565b92611a45600a916117a3565b93048061197c565b506040516040810181811067ffffffffffffffff821117611a99575b604052600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b611aa16104e5565b611a6956fea2646970667358221220cd42236d005c798fd1b4efdabf596b6fa61829ea8ada32ff7fd158fcd18df36964736f6c634300080e0033";

type StoreFrontConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StoreFrontConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StoreFront__factory extends ContractFactory {
  constructor(...args: StoreFrontConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _minter: string,
    _baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StoreFront> {
    return super.deploy(
      _minter,
      _baseURI,
      overrides || {}
    ) as Promise<StoreFront>;
  }
  override getDeployTransaction(
    _minter: string,
    _baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_minter, _baseURI, overrides || {});
  }
  override attach(address: string): StoreFront {
    return super.attach(address) as StoreFront;
  }
  override connect(signer: Signer): StoreFront__factory {
    return super.connect(signer) as StoreFront__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StoreFrontInterface {
    return new utils.Interface(_abi) as StoreFrontInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StoreFront {
    return new Contract(address, _abi, signerOrProvider) as StoreFront;
  }
}
