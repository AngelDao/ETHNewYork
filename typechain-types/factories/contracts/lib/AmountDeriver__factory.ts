/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AmountDeriver,
  AmountDeriverInterface,
} from "../../../contracts/lib/AmountDeriver";

const _abi = [
  {
    inputs: [],
    name: "InexactFraction",
    type: "error",
  },
];

const _bytecode =
  "0x60808060405234601357603a908160198239f35b600080fdfe600080fdfea26469706673582212203fcd1ff879898bf2d7ef953ad87eff95b7ef86a43468511e77763d78aefb40f764736f6c634300080e0033";

type AmountDeriverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AmountDeriverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AmountDeriver__factory extends ContractFactory {
  constructor(...args: AmountDeriverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AmountDeriver> {
    return super.deploy(overrides || {}) as Promise<AmountDeriver>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AmountDeriver {
    return super.attach(address) as AmountDeriver;
  }
  override connect(signer: Signer): AmountDeriver__factory {
    return super.connect(signer) as AmountDeriver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AmountDeriverInterface {
    return new utils.Interface(_abi) as AmountDeriverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AmountDeriver {
    return new Contract(address, _abi, signerOrProvider) as AmountDeriver;
  }
}
