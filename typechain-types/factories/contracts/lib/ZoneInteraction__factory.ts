/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ZoneInteraction,
  ZoneInteractionInterface,
} from "../../../contracts/lib/ZoneInteraction";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "InvalidRestrictedOrder",
    type: "error",
  },
];

const _bytecode =
  "0x60808060405234601357603a908160198239f35b600080fdfe600080fdfea2646970667358221220842bacf377cb23c4b75c13504703a9673c3b45bc2eb1ec4423ca2267f7b4a95064736f6c634300080e0033";

type ZoneInteractionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZoneInteractionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZoneInteraction__factory extends ContractFactory {
  constructor(...args: ZoneInteractionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ZoneInteraction> {
    return super.deploy(overrides || {}) as Promise<ZoneInteraction>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ZoneInteraction {
    return super.attach(address) as ZoneInteraction;
  }
  override connect(signer: Signer): ZoneInteraction__factory {
    return super.connect(signer) as ZoneInteraction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZoneInteractionInterface {
    return new utils.Interface(_abi) as ZoneInteractionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ZoneInteraction {
    return new Contract(address, _abi, signerOrProvider) as ZoneInteraction;
  }
}
