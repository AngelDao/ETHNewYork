/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LazyMintProxy,
  LazyMintProxyInterface,
} from "../../contracts/LazyMintProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_seaportAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_storefrontAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "offerer",
                type: "address",
              },
              {
                internalType: "address",
                name: "zone",
                type: "address",
              },
              {
                components: [
                  {
                    internalType: "enum ItemType",
                    name: "itemType",
                    type: "uint8",
                  },
                  {
                    internalType: "address",
                    name: "token",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "identifierOrCriteria",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "startAmount",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "endAmount",
                    type: "uint256",
                  },
                ],
                internalType: "struct OfferItem[]",
                name: "offer",
                type: "tuple[]",
              },
              {
                components: [
                  {
                    internalType: "enum ItemType",
                    name: "itemType",
                    type: "uint8",
                  },
                  {
                    internalType: "address",
                    name: "token",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "identifierOrCriteria",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "startAmount",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "endAmount",
                    type: "uint256",
                  },
                  {
                    internalType: "address payable",
                    name: "recipient",
                    type: "address",
                  },
                ],
                internalType: "struct ConsiderationItem[]",
                name: "consideration",
                type: "tuple[]",
              },
              {
                internalType: "enum OrderType",
                name: "orderType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "startTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "endTime",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "zoneHash",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "salt",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "conduitKey",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "totalOriginalConsiderationItems",
                type: "uint256",
              },
            ],
            internalType: "struct OrderParameters",
            name: "parameters",
            type: "tuple",
          },
          {
            internalType: "uint120",
            name: "numerator",
            type: "uint120",
          },
          {
            internalType: "uint120",
            name: "denominator",
            type: "uint120",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "extraData",
            type: "bytes",
          },
        ],
        internalType: "struct AdvancedOrder",
        name: "advancedOrder",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "orderIndex",
            type: "uint256",
          },
          {
            internalType: "enum Side",
            name: "side",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "identifier",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "criteriaProof",
            type: "bytes32[]",
          },
        ],
        internalType: "struct CriteriaResolver[]",
        name: "criteriaResolvers",
        type: "tuple[]",
      },
      {
        internalType: "bytes32",
        name: "fulfillerConduitKey",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "fulfillAdvancedOrder",
    outputs: [
      {
        internalType: "bool",
        name: "fulfilled",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "offerer",
                type: "address",
              },
              {
                internalType: "address",
                name: "zone",
                type: "address",
              },
              {
                components: [
                  {
                    internalType: "enum ItemType",
                    name: "itemType",
                    type: "uint8",
                  },
                  {
                    internalType: "address",
                    name: "token",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "identifierOrCriteria",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "startAmount",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "endAmount",
                    type: "uint256",
                  },
                ],
                internalType: "struct OfferItem[]",
                name: "offer",
                type: "tuple[]",
              },
              {
                components: [
                  {
                    internalType: "enum ItemType",
                    name: "itemType",
                    type: "uint8",
                  },
                  {
                    internalType: "address",
                    name: "token",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "identifierOrCriteria",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "startAmount",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "endAmount",
                    type: "uint256",
                  },
                  {
                    internalType: "address payable",
                    name: "recipient",
                    type: "address",
                  },
                ],
                internalType: "struct ConsiderationItem[]",
                name: "consideration",
                type: "tuple[]",
              },
              {
                internalType: "enum OrderType",
                name: "orderType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "startTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "endTime",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "zoneHash",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "salt",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "conduitKey",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "totalOriginalConsiderationItems",
                type: "uint256",
              },
            ],
            internalType: "struct OrderParameters",
            name: "parameters",
            type: "tuple",
          },
          {
            internalType: "uint120",
            name: "numerator",
            type: "uint120",
          },
          {
            internalType: "uint120",
            name: "denominator",
            type: "uint120",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "extraData",
            type: "bytes",
          },
        ],
        internalType: "struct AdvancedOrder",
        name: "advancedOrder",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "orderIndex",
            type: "uint256",
          },
          {
            internalType: "enum Side",
            name: "side",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "identifier",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "criteriaProof",
            type: "bytes32[]",
          },
        ],
        internalType: "struct CriteriaResolver[]",
        name: "criteriaResolvers",
        type: "tuple[]",
      },
      {
        internalType: "bytes32",
        name: "fulfillerConduitKey",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "_operator",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "_v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "_r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_s",
        type: "bytes32",
      },
    ],
    name: "fulfillAdvancedOrderWithPermit",
    outputs: [
      {
        internalType: "bool",
        name: "fulfilled",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "seaportAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "storefrontAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60803461009357601f6110a138819003918201601f19168301916001600160401b038311848410176100985780849260409485528339810103126100935780610056602061004f610084946100ae565b92016100ae565b600080546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055565b604051610fde90816100c38239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100935756fe608080604052600436101561001357600080fd5b6000803560e01c91826352c6bfeb146100b3575081635e4072941461005f575080638f38f40b146100565763e7acab241461004e575b600080fd5b610049610235565b50610049610178565b346100b057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b057602073ffffffffffffffffffffffffffffffffffffffff60015416604051908152f35b80fd5b346100ff57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100ff5773ffffffffffffffffffffffffffffffffffffffff60209254168152f35b5080fd5b600091031261004957565b908160a09103126100495790565b9181601f840112156100495782359167ffffffffffffffff8311610049576020808501948460051b01011161004957565b73ffffffffffffffffffffffffffffffffffffffff81160361004957565b35906101768261014d565b565b506101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100495767ffffffffffffffff600435818111610049576101c590369060040161010e565b90602435908111610049576101de90369060040161011c565b60643592916101ec8461014d565b6084356101f88161014d565b60a4359060ff82168203610049576102319561021f9560e4359560c4359560443592610cc7565b60405190151581529081906020820190565b0390f35b5060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100495767ffffffffffffffff6004803582811161004957610281903690830161010e565b9160243590811161004957610299903690830161011c565b9092606435936102a88561014d565b6102e36102ca60015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b9273ffffffffffffffffffffffffffffffffffffffff6103106103068580610510565b6040810190610543565b9590501693843b1561004957600061037f9160209689838a604051968795869485937f40c10f1900000000000000000000000000000000000000000000000000000000855284016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af18015610503575b6104ea575b506103b56102ca6102ca60005473ffffffffffffffffffffffffffffffffffffffff1690565b916103f2604051978895869485947fe7acab24000000000000000000000000000000000000000000000000000000008652604435928b8701610a7e565b039134905af19182156104dd575b6000926104ad575b50811561041c576040518215158152602090f35b6104a9906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352820160809060208152602560208201527f536561706f7274206f7264657220756e61626c6520746f2062652066756c666960408201527f6c6c65642e00000000000000000000000000000000000000000000000000000060608201520190565b0390fd5b6104cf91925060203d81116104d6575b6104c781836105da565b810190610628565b9038610408565b503d6104bd565b6104e561061b565b610400565b806104f76104fd92610597565b80610103565b3861038f565b61050b61061b565b61038a565b9035907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea181360301821215610049570190565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610049570180359067ffffffffffffffff8211610049576020019160a082023603831361004957565b67ffffffffffffffff81116105ab57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176105ab57604052565b506040513d6000823e3d90fd5b90816020910312610049575180151581036100495790565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561004957016020813591019167ffffffffffffffff82116100495760a082023603831361004957565b3590600682101561004957565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9060068210156106dd5752565b6106e56106a0565b52565b9190808252602080920192916000905b828210610706575050505090565b909192938061071f60019261071a88610693565b6106d0565b73ffffffffffffffffffffffffffffffffffffffff838701356107418161014d565b168184015260408681013590820152606080870135908201526080808701359082015260a09081019501939201906106f8565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561004957016020813591019167ffffffffffffffff82116100495760c082023603831361004957565b9190808252602080920192916000905b8282106107e5575050505090565b90919293806107f960019261071a88610693565b828601356108068161014d565b73ffffffffffffffffffffffffffffffffffffffff8091168483015260408088013590830152606080880135908301526080808801359083015260a090818801356108508161014d565b169082015260c09081019501939201906107d7565b3590600482101561004957565b9060048210156106dd5752565b35906effffffffffffffffffffffffffffff8216820361004957565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561004957016020813591019167ffffffffffffffff821161004957813603831361004957565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116100495760209260051b80928483013701016000815290565b9091828152602080910192839160059282841b860195856000925b85841061099857505050505050505090565b9091929394959697818103845288357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61843603018112156100495783018035825286810135600281101561004957878301526040808201359083015260608082013590830152608090818101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561004957019087823592019267ffffffffffffffff831161004957828b1b360384136100495760019389938493610a6c9360a08092820152019161092a565b9a019401940192969594939190610986565b909594929395608082528035927ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea1823603018412156100495761017695610c9783610ca5946060970160a0608088015261012090610afb828901610ae18361016b565b73ffffffffffffffffffffffffffffffffffffffff169052565b610b076020820161016b565b610b2c61014091828b019073ffffffffffffffffffffffffffffffffffffffff169052565b610b8e610b51610b3f6040850185610640565b610160808e01526102808d01916106e8565b610b5d8c850185610774565b8c83037ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee0016101808e0152906107c7565b91610ba9610b9e60808301610865565b6101a08c0190610872565b60a08101356101c08b015260c08101356101e08b015260e08101356102008b015261010093848201356102208c01528101356102408b01520135610260890152610c10610bf86020850161087f565b6effffffffffffffffffffffffffffff1660a08a0152565b610c37610c1f6040850161087f565b6effffffffffffffffffffffffffffff1660c08a0152565b610c87610c7c610c498b86018661089b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8094918c60e087828603019101526108eb565b93608081019061089b565b92909189850301908901526108eb565b91848303602086015261096b565b956040820152019073ffffffffffffffffffffffffffffffffffffffff169052565b929897909394969195610cf26102ca60015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff610d146103068780610510565b9290501690813b15610049576040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89166004820152602481019190915260008160448183865af18015610f9b575b610f88575b50803b15610049576040517fcfa8fb4200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808916600483015290991660248a0152600160448a01527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60648a015260ff909116608489015260a488019290925260c487015260209590600090829081838160e4810103925af18015610f7b575b610f68575b50610e97610e606102ca6102ca60005473ffffffffffffffffffffffffffffffffffffffff1690565b93604051988996879586957fe7acab2400000000000000000000000000000000000000000000000000000000875260048701610a7e565b039134905af1918215610f5b575b600092610f3b575b508115610eb657565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f536561706f7274206f7264657220756e61626c6520746f2062652066756c666960448201527f6c6c65642e0000000000000000000000000000000000000000000000000000006064820152608490fd5b610f5491925060203d81116104d6576104c781836105da565b9038610ead565b610f6361061b565b610ea5565b806104f7610f7592610597565b38610e37565b610f8361061b565b610e32565b806104f7610f9592610597565b38610d80565b610fa361061b565b610d7b56fea2646970667358221220090736e1e355bae623031cebbcc61f42daced7ffeaa08bb6d3309fbcdd2222f764736f6c634300080e0033";

type LazyMintProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LazyMintProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LazyMintProxy__factory extends ContractFactory {
  constructor(...args: LazyMintProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _seaportAddress: string,
    _storefrontAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LazyMintProxy> {
    return super.deploy(
      _seaportAddress,
      _storefrontAddress,
      overrides || {}
    ) as Promise<LazyMintProxy>;
  }
  override getDeployTransaction(
    _seaportAddress: string,
    _storefrontAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _seaportAddress,
      _storefrontAddress,
      overrides || {}
    );
  }
  override attach(address: string): LazyMintProxy {
    return super.attach(address) as LazyMintProxy;
  }
  override connect(signer: Signer): LazyMintProxy__factory {
    return super.connect(signer) as LazyMintProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LazyMintProxyInterface {
    return new utils.Interface(_abi) as LazyMintProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LazyMintProxy {
    return new Contract(address, _abi, signerOrProvider) as LazyMintProxy;
  }
}
