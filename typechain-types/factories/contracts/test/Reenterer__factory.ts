/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Reenterer,
  ReentererInterface,
} from "../../../contracts/test/Reenterer";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "returnData",
        type: "bytes",
      },
    ],
    name: "Reentered",
    type: "event",
  },
  {
    inputs: [],
    name: "callData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "msgValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "targetToUse",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "msgValueToUse",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "callDataToUse",
        type: "bytes",
      },
    ],
    name: "prepare",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "target",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60808060405234610016576108ba908161001c8239f35b600080fdfe60806040526004361015610023575b361561001957600080fd5b61002161075f565b005b6000803560e01c9081634e417a9814610076575080635157589b1461006d578063d4b83992146100645763ddf363d70361000e5761005f61047a565b61000e565b5061005f610427565b5061005f610389565b346101d857807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101d857806002546100b1816101db565b9081608052600190818116908160001461017f575060011461010a575b6100f97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80850161025e565b60405180610106816102ad565b0390f35b90919250600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b82841061016b5750505060a0017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff806100f9836100ce565b81816020925460a087015201930192610134565b93505050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501660a0526100f97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8060c091836100ce565b80fd5b90600182811c92168015610224575b60208310146101f557565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916101ea565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09101166080016080811067ffffffffffffffff8211176102a057604052565b6102a861022e565b604052565b906020918281526080519283818301526000905b84821061030c5750601f84604094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093116102ff575b0116010190565b60008582860101526102f8565b8160a0829301516040828601015201906102c1565b919091602080825283519081818401526000945b828610610373575050601f817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09260409596116102ff570116010190565b8581018201518487016040015294810194610335565b50346104225760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104225760043573ffffffffffffffffffffffffffffffffffffffff81168103610422576044359067ffffffffffffffff90818311610422573660238401121561042257826004013591821161042257366024838501011161042257602461002193019060243590610528565b600080fd5b50346104225760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261042257602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b50346104225760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610422576020600154604051908152f35b601f81116104c3575050565b600090600282527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace906020601f850160051c8301941061051e575b601f0160051c01915b82811061051357505050565b818155600101610507565b90925082906104fe565b73ffffffffffffffffffffffffffffffffffffffff90929192167fffffffffffffffffffffffff00000000000000000000000000000000000000006000541617600055600191825567ffffffffffffffff83116106cd575b6105948361058f6002546101db565b6104b7565b600090601f841160011461060b576000918491826105e0575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91921b9260031b1c191617600255565b013591507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff386105ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084939416918361065e60026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90565b93825b878282106106b45750501061067c575b505050811b01600255565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88560031b161c19910135169055388080610671565b8585013587559095019460209384019387935001610661565b6106d561022e565b610580565b3d1561075a5767ffffffffffffffff903d82811161074d575b604051927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f81601f850116011684019084821090821117610740575b60405282523d6000602084013e565b61074861022e565b610731565b61075561022e565b6106f3565b606090565b600073ffffffffffffffffffffffffffffffffffffffff81541681600191825460405190839460025490610792826101db565b9181811690811561085357506001146107fd575b505081849503925af1906107b86106da565b91156107f557506107f07f52b1b52a16f834754c20ed40ad488c0fc799dea307f9bb9cde6413f0e356703e9160405191829182610321565b0390a1565b3d81803e3d90fd5b6002865290955084907f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b87831061083d575050508184958101956107a6565b8054858401528896506020909201918101610828565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016855250508201945081846107a656fea2646970667358221220549b3348fbcfb2b18c3e750eb514222e45776b298e72bf40441e5ef03b489f4064736f6c634300080e0033";

type ReentererConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReentererConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Reenterer__factory extends ContractFactory {
  constructor(...args: ReentererConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Reenterer> {
    return super.deploy(overrides || {}) as Promise<Reenterer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Reenterer {
    return super.attach(address) as Reenterer;
  }
  override connect(signer: Signer): Reenterer__factory {
    return super.connect(signer) as Reenterer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReentererInterface {
    return new utils.Interface(_abi) as ReentererInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Reenterer {
    return new Contract(address, _abi, signerOrProvider) as Reenterer;
  }
}
