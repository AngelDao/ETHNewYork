/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface EIP1271WalletInterface extends utils.Interface {
  functions: {
    "approveERC20(address,address,uint256)": FunctionFragment;
    "approveNFT(address,address)": FunctionFragment;
    "digestApproved(bytes32)": FunctionFragment;
    "isValid()": FunctionFragment;
    "isValidSignature(bytes32,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerDigest(bytes32,bool)": FunctionFragment;
    "revertWithMessage(bool)": FunctionFragment;
    "setValid(bool)": FunctionFragment;
    "showRevertMessage()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveERC20"
      | "approveNFT"
      | "digestApproved"
      | "isValid"
      | "isValidSignature"
      | "owner"
      | "registerDigest"
      | "revertWithMessage"
      | "setValid"
      | "showRevertMessage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveERC20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveNFT",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "digestApproved",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isValid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerDigest",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "revertWithMessage",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setValid", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "showRevertMessage",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "approveERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approveNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "digestApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isValid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertWithMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setValid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "showRevertMessage",
    data: BytesLike
  ): Result;

  events: {};
}

export interface EIP1271Wallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EIP1271WalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveERC20(
      token: string,
      operator: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveNFT(
      token: string,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    digestApproved(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValid(overrides?: CallOverrides): Promise<[boolean]>;

    isValidSignature(
      digest: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerDigest(
      digest: BytesLike,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revertWithMessage(
      showMessage: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValid(
      valid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    showRevertMessage(overrides?: CallOverrides): Promise<[boolean]>;
  };

  approveERC20(
    token: string,
    operator: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveNFT(
    token: string,
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  digestApproved(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isValid(overrides?: CallOverrides): Promise<boolean>;

  isValidSignature(
    digest: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerDigest(
    digest: BytesLike,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revertWithMessage(
    showMessage: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValid(
    valid: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  showRevertMessage(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    approveERC20(
      token: string,
      operator: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveNFT(
      token: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    digestApproved(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValid(overrides?: CallOverrides): Promise<boolean>;

    isValidSignature(
      digest: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerDigest(
      digest: BytesLike,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    revertWithMessage(
      showMessage: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setValid(valid: boolean, overrides?: CallOverrides): Promise<void>;

    showRevertMessage(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    approveERC20(
      token: string,
      operator: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveNFT(
      token: string,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    digestApproved(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValid(overrides?: CallOverrides): Promise<BigNumber>;

    isValidSignature(
      digest: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerDigest(
      digest: BytesLike,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revertWithMessage(
      showMessage: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValid(
      valid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    showRevertMessage(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approveERC20(
      token: string,
      operator: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveNFT(
      token: string,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    digestApproved(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidSignature(
      digest: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerDigest(
      digest: BytesLike,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revertWithMessage(
      showMessage: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValid(
      valid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    showRevertMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
