/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface PausableZoneEventsAndErrorsInterface extends utils.Interface {
  functions: {};

  events: {
    "OperatorUpdated(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused()": EventFragment;
    "PauserUpdated(address)": EventFragment;
    "PotentialOwnerUpdated(address)": EventFragment;
    "Unpaused()": EventFragment;
    "ZoneCreated(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OperatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PotentialOwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZoneCreated"): EventFragment;
}

export interface OperatorUpdatedEventObject {
  newOperator: string;
}
export type OperatorUpdatedEvent = TypedEvent<
  [string],
  OperatorUpdatedEventObject
>;

export type OperatorUpdatedEventFilter = TypedEventFilter<OperatorUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {}
export type PausedEvent = TypedEvent<[], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PauserUpdatedEventObject {
  newPauser: string;
}
export type PauserUpdatedEvent = TypedEvent<[string], PauserUpdatedEventObject>;

export type PauserUpdatedEventFilter = TypedEventFilter<PauserUpdatedEvent>;

export interface PotentialOwnerUpdatedEventObject {
  newPotentialOwner: string;
}
export type PotentialOwnerUpdatedEvent = TypedEvent<
  [string],
  PotentialOwnerUpdatedEventObject
>;

export type PotentialOwnerUpdatedEventFilter =
  TypedEventFilter<PotentialOwnerUpdatedEvent>;

export interface UnpausedEventObject {}
export type UnpausedEvent = TypedEvent<[], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ZoneCreatedEventObject {
  zone: string;
  salt: string;
}
export type ZoneCreatedEvent = TypedEvent<
  [string, string],
  ZoneCreatedEventObject
>;

export type ZoneCreatedEventFilter = TypedEventFilter<ZoneCreatedEvent>;

export interface PausableZoneEventsAndErrors extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PausableZoneEventsAndErrorsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "OperatorUpdated(address)"(newOperator?: null): OperatorUpdatedEventFilter;
    OperatorUpdated(newOperator?: null): OperatorUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: null,
      newOwner?: null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: null,
      newOwner?: null
    ): OwnershipTransferredEventFilter;

    "Paused()"(): PausedEventFilter;
    Paused(): PausedEventFilter;

    "PauserUpdated(address)"(newPauser?: null): PauserUpdatedEventFilter;
    PauserUpdated(newPauser?: null): PauserUpdatedEventFilter;

    "PotentialOwnerUpdated(address)"(
      newPotentialOwner?: null
    ): PotentialOwnerUpdatedEventFilter;
    PotentialOwnerUpdated(
      newPotentialOwner?: null
    ): PotentialOwnerUpdatedEventFilter;

    "Unpaused()"(): UnpausedEventFilter;
    Unpaused(): UnpausedEventFilter;

    "ZoneCreated(address,bytes32)"(
      zone?: null,
      salt?: null
    ): ZoneCreatedEventFilter;
    ZoneCreated(zone?: null, salt?: null): ZoneCreatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
